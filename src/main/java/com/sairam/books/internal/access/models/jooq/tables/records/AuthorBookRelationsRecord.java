/*
 * This file is generated by jOOQ.
 */
package com.sairam.books.internal.access.models.jooq.tables.records;


import com.sairam.books.internal.access.models.jooq.tables.AuthorBookRelations;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorBookRelationsRecord extends UpdatableRecordImpl<AuthorBookRelationsRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 182227246;

    /**
     * Setter for <code>books.author_book_relations.author_id</code>.
     */
    public void setAuthorId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>books.author_book_relations.author_id</code>.
     */
    public String getAuthorId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>books.author_book_relations.book_id</code>.
     */
    public void setBookId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>books.author_book_relations.book_id</code>.
     */
    public String getBookId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return AuthorBookRelations.AUTHOR_BOOK_RELATIONS.AUTHOR_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return AuthorBookRelations.AUTHOR_BOOK_RELATIONS.BOOK_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getAuthorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getBookId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getAuthorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getBookId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorBookRelationsRecord value1(String value) {
        setAuthorId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorBookRelationsRecord value2(String value) {
        setBookId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorBookRelationsRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorBookRelationsRecord
     */
    public AuthorBookRelationsRecord() {
        super(AuthorBookRelations.AUTHOR_BOOK_RELATIONS);
    }

    /**
     * Create a detached, initialised AuthorBookRelationsRecord
     */
    public AuthorBookRelationsRecord(String authorId, String bookId) {
        super(AuthorBookRelations.AUTHOR_BOOK_RELATIONS);

        set(0, authorId);
        set(1, bookId);
    }
}
