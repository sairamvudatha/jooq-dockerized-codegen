/*
 * This file is generated by jOOQ.
 */
package com.sairam.books.internal.access.models.jooq.tables;


import com.sairam.books.internal.access.models.jooq.Books;
import com.sairam.books.internal.access.models.jooq.Indexes;
import com.sairam.books.internal.access.models.jooq.Keys;
import com.sairam.books.internal.access.models.jooq.tables.records.AuthorsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authors extends TableImpl<AuthorsRecord> {

    private static final long serialVersionUID = -2052545343;

    /**
     * The reference instance of <code>books.authors</code>
     */
    public static final Authors AUTHORS = new Authors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsRecord> getRecordType() {
        return AuthorsRecord.class;
    }

    /**
     * The column <code>books.authors.id</code>.
     */
    public final TableField<AuthorsRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CHAR(36).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>books.authors.name</code>.
     */
    public final TableField<AuthorsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>books.authors.created_at</code>.
     */
    public final TableField<AuthorsRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(6)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>books.authors.updated_at</code>.
     */
    public final TableField<AuthorsRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(6)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>books.authors</code> table reference
     */
    public Authors() {
        this(DSL.name("authors"), null);
    }

    /**
     * Create an aliased <code>books.authors</code> table reference
     */
    public Authors(String alias) {
        this(DSL.name(alias), AUTHORS);
    }

    /**
     * Create an aliased <code>books.authors</code> table reference
     */
    public Authors(Name alias) {
        this(alias, AUTHORS);
    }

    private Authors(Name alias, Table<AuthorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authors(Name alias, Table<AuthorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Authors(Table<O> child, ForeignKey<O, AuthorsRecord> key) {
        super(child, key, AUTHORS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Books.BOOKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTHORS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthorsRecord> getPrimaryKey() {
        return Keys.KEY_AUTHORS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthorsRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorsRecord>>asList(Keys.KEY_AUTHORS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authors as(String alias) {
        return new Authors(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authors as(Name alias) {
        return new Authors(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(String name) {
        return new Authors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(Name name) {
        return new Authors(name, null);
    }
}
